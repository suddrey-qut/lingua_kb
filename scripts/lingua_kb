#!/usr/bin/env python
import sys
import rospy
import time

from std_msgs.msg import String
from _knowledge_base import MongoKB

from lingua_kb.srv import Ask, AskResponse, Assert, State, StateResponse, Tell, Hierarchy, HierarchyResponse

knowledge_base = None

def assert_cb(req):
  result = knowledge_base.ask(req.query)

  if not isinstance(result, bool):
    raise rospy.ServiceException('Attempting to assert a query')

  return result

def ask_cb(req):
  result = knowledge_base.ask(req.query)

  if isinstance(result, bool):
    raise rospy.ServiceException('Attempting to query an assertion')
  
  response = AskResponse(data=result)

  if not isinstance(response.data, list):
    response.data = [ response.data ]
    
  return response

def state_cb(req):
  return StateResponse(data=knowledge_base.dump())

def tell_cb(req):
  knowledge_base.tell(req.statement)
  return True

def hierarchy_cb(req):
  resp = HierarchyResponse()
  resp.parents = knowledge_base.get_parent_types(req.type_name)
  resp.children = knowledge_base.get_child_types(req.type_name)
  return resp

def main():
  global knowledge_base

  rospy.init_node('lingua_kb')
      
  knowledge_base = MongoKB()

  knowledge_base.connect()
  rospy.Service('/kb/ask', Ask, ask_cb)
  rospy.Service('/kb/assert', Assert, assert_cb)
  rospy.Service('/kb/state', State, state_cb)
  rospy.Service('/kb/tell', Tell, tell_cb)
  rospy.Service('/kb/types/hierarchy', Hierarchy, hierarchy_cb)

  try:
    rospy.loginfo('{} started'.format(rospy.get_name()))
    rospy.spin()
  finally:
    knowledge_base.close()
      
if __name__ == '__main__':
  main()
